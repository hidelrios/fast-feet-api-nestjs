// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  DELIVERYMAN
}
// Usuários (Users)
model User {
  id        String    @id @default(uuid())
  name      String
  cpf       String    @unique
  password  String
  role      Role      @default(DELIVERYMAN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  deliveries Delivery[] @relation("DeliverymanDeliveries")
}

// Destinatários (Recipients)
model Recipient {
  id         String    @id @default(uuid())
  name       String
  street     String
  number     String
  complement String?
  state      String
  city       String
  zipCode    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  deliveries Delivery[]

  notification Notification[]
}
// Notificações (Notifications)
model Notification {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())

  deliveryId String
  delivery   Delivery @relation(fields: [deliveryId], references: [id])

  recipientId String
  recipient   Recipient @relation(fields: [recipientId], references: [id])
}

// Encomendas(Delivery)
model Delivery {
  id       String         @id @default(uuid())
  product  String
  status   DeliveryStatus @default(PENDING)
  photoUrl String? // obrigatório quando entregue

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  recipientId String
  recipient   Recipient @relation(fields: [recipientId], references: [id])

  deliverymanId String
  deliveryman   User?  @relation("DeliverymanDeliveries", fields: [deliverymanId], references: [id])

  notification Notification[]
}

enum DeliveryStatus {
  PENDING // aguardando retirada
  WITHDRAWN // retirada
  DELIVERED // entregue (com foto)
  RETURNED // devolvida
}
